# =================================================
# OpenWrt IPK 多仓库构建工作流
# 仓库: https://github.com/somemoo/OpenWrt
# 特性: 支持多仓库回退/架构选择/增量编译
# =================================================

name: OpenWrt-IPK-Builder

on:
  workflow_dispatch:
    inputs:
      Arch:
        description: "选择目标架构"
        required: true
        type: choice
        options: [
          'x86/64', 'ipq40xx/generic', 'ipq806x/generic',
          'ramips/mt7620', 'ramips/mt7621', 'ramips/mt76x8',
          'ath79/generic', 'sunxi/cortexa7', 'bcm27xx/bcm2711'
        ]
      Package:
        description: "指定构建包 (留空构建全部)"
        required: false
        type: string

env:
  TZ: Asia/Shanghai
  BUILD_ROOT: ${{ github.workspace }}

jobs:
  # ======================= 矩阵生成阶段 =======================
  matrix-generator:
    name: Generate Build Matrix
    runs-on: ubuntu-latest
    outputs:
      build_matrix: ${{ steps.set-matrix.outputs.matrix }}
      repo_info: ${{ steps.set-matrix.outputs.repo_info }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: 生成构建矩阵
        id: set-matrix
        run: |
          # 仓库配置
          declare -A REPOS=(
            ["main"]="https://github.com/somemoo/OpenWrt-packages:lede"
            ["fallback"]="https://github.com/kiddin9/kwrt-packages:main"
          )

          # 包检测函数
          find_package() {
            for repo in "${!REPOS[@]}"; do
              IFS=':' read url branch <<< "${REPOS[$repo]}"
              git clone -b $branch --depth 1 $url _temp_repo
              if [ -d "_temp_repo/$1" ]; then
                echo "$url:$branch"
                rm -rf _temp_repo
                return 0
              fi
              rm -rf _temp_repo
            done
            return 1
          }

          # 处理输入包
          if [[ -n "${{ inputs.Package }}" ]]; then
            repo_info=$(find_package "${{ inputs.Package }}") || {
              echo "::error::Package ${{ inputs.Package }} not found in any repo"
              exit 1
            }
            matrix_json="[\"${{ inputs.Package }}\"]"
          else
            # 扫描主仓库的所有包
            git clone -b lede --depth 1 ${REPOS[main]%:*} _scan_repo
            matrix_json=$(find _scan_repo -maxdepth 1 -type d -name 'luci-app-*' \
              | awk -F/ '{print $NF}' \
              | jq -R -s -c 'split("\n") | map(select(. != ""))')
            repo_info="${REPOS[main]}"
            rm -rf _scan_repo
          fi

          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
          echo "repo_info=$repo_info" >> $GITHUB_OUTPUT

  # ======================= 构建阶段 =======================
  package-builder:
    name: Build ${{ matrix.package }} (${{ inputs.Arch }})
    needs: matrix-generator
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.matrix-generator.outputs.build_matrix) }}
      fail-fast: false

    steps:
      - name: 初始化环境
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qqy \
            build-essential clang flex bison g++ gawk gcc-multilib \
            gettext git libncurses5-dev libssl-dev python3 python3-pip \
            rsync unzip zlib1g-dev file wget qemu-utils

      - name: 配置SDK
        env:
          ARCH_PATH: ${{ inputs.Arch | replace('/', '-') }}
        run: |
          SDK_URL="https://downloads.immortalwrt.org/releases/24.10-SNAPSHOT/targets/${{ inputs.Arch }}/immortalwrt-sdk-24.10-SNAPSHOT-$ARCH_PATH.tar.zst"
          wget -q --show-progress "$SDK_URL"
          mkdir -p openwrt-sdk && tar -I zstd -xf *.tar.zst -C openwrt-sdk --strip-components=1
          echo "SDK_ROOT=$PWD/openwrt-sdk" >> $GITHUB_ENV

      - name: 准备代码库
        run: |
          IFS=':' read repo_url repo_branch <<< "${{ needs.matrix-generator.outputs.repo_info }}"
          git clone -b $repo_branch --depth 1 $repo_url $SDK_ROOT/package/custom
          
          # 清理非必要组件
          rm -rf $SDK_ROOT/feeds/{luci,packages,base}/.{docs,contrib}
          find $SDK_ROOT/feeds -type d $$ -name 'tests' -o -name 'example' $$ -exec rm -rf {} +

      - name: 配置编译选项
        run: |
          cd $SDK_ROOT
          cat > .config << EOF
          CONFIG_TARGET_${{ inputs.Arch | replace('/', '_') }}=y
          CONFIG_PACKAGE_${{ matrix.package }}=m
          CONFIG_CCACHE=y
          EOF
          make defconfig

      - name: 编译包
        run: |
          cd $SDK_ROOT
          make -j$(nproc) package/${{ matrix.package }}/compile V=s

      - name: 收集产物
        run: |
          mkdir -p artifacts/${{ inputs.Arch }}
          find $SDK_ROOT/bin -name '*.ipk' -exec cp {} artifacts/${{ inputs.Arch }} \;

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with: 
          name: ${{ inputs.Arch }}-${{ matrix.package }}-ipk
          path: artifacts/${{ inputs.Arch }}
          retention-days: 7
