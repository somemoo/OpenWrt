#=================================================  
# https://github.com/somemoo/OpenWrt  
# 描述: 可以单架构或多架构构建单个或多个IPK
# 许可证: MIT  
# 作者: vison.v   
#================================================= 

name: Build-App  

on:
  workflow_dispatch:
    inputs:
      Target:
        description: '输入包名 (多名字输入，形式如下： ["luci-app-mosdns","luci-app-dockerman"])'
        default: '["luci-app-mosdns"]'
        type: string
      Arch:
        #可能架构："ipq40xx/generic","ipq806x/generic","ramips/mt7620","ramips/mt7621","ramips/mt76x8","ramips/rt288x","ramips/rt305x","ramips/rt3883","ath79/generic","sunxi/cortexa7","sunxi/cortexa8","sunxi/cortexa53","bcm27xx/bcm2708","bcm27xx/bcm2709","bcm27xx/bcm2710","bcm27xx/bcm2711","bcm27xx/bcm2712","bcm47xx/generic","mediatek/mt7622","mediatek/mt7623","mediatek/mt7629","lantiq/xrx200","rockchip/armv8","mvebu/cortexa9","realtek/rtl838x","realtek/rtl839x","realtek/rtl930x","realtek/rtl931x","zynq/generic"
        description: '输入架构 (多架构输入，形式如下： ["x86/64","ipq40xx/generic"])'
        default: '["x86/64"]'
        type: string

jobs:  
  build:  
    runs-on: ubuntu-latest  
    strategy:  
      fail-fast: false  
      matrix:  
        target: ${{ fromJSON(github.event.inputs.Target) }}
        arch: ${{ fromJSON(github.event.inputs.Arch) }}
        
    steps:  
    - name: Checkout  
      uses: actions/checkout@main  
      
    - name: 加载环境  
      env:  
        DEBIAN_FRONTEND: noninteractive  
      run: |  
        sudo -E apt-get -qq update  
        sudo -E apt-get -qq install build-essential clang llvm flex g++ gawk gcc-multilib gettext \
        git libncurses5-dev libssl-dev python3 python3-pyelftools python3-setuptools \
        libpython3-dev rsync unzip zstd zlib1g-dev swig aria2 jq subversion qemu-utils ccache rename \
        libelf-dev device-tree-compiler libgnutls28-dev coccinelle libgmp3-dev libmpc-dev  
        sudo -E apt-get -qq purge azure-cli ghc* zulu* firefox powershell openjdk* dotnet* google* mysql* php* android*  
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc  
        sudo -E apt-get -qq autoremove --purge  
        sudo -E apt-get -qq clean  
        sudo timedatectl set-timezone "Asia/Shanghai"  
        git clone --depth=1 https://github.com/openwrt-dev/po2lmo  
        (cd po2lmo && sudo make && sudo make install) 
    
    - name: 设置变量  
      id: ENV  
      run: |  
        echo "date=$(date +'%m.%d')" >> $GITHUB_ENV  
        echo "arch_path=$(echo ${{ matrix.arch }} | tr '/' '-')" >> $GITHUB_ENV
      
    - name: 准备SDK  
      run: |  
        SDK_URL1="https://downloads.immortalwrt.org/releases/24.10-SNAPSHOT/targets/${{ matrix.arch }}/immortalwrt-sdk-24.10-SNAPSHOT-${{ env.arch_path }}_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
        SDK_URL2="https://downloads.immortalwrt.org/releases/24.10-SNAPSHOT/targets/${{ matrix.arch }}/immortalwrt-sdk-24.10-SNAPSHOT-${{ env.arch_path }}_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst"
        wget --spider -q "$SDK_URL1" && wget "$SDK_URL1" || wget "$SDK_URL2"
        mkdir OpenWrt-${{ env.arch_path }} && tar -I 'zstd -d' -xf immortalwrt-*.tar.zst -C OpenWrt-${{ env.arch_path }} --strip-components 1 && rm immortalwrt-*.tar.zst  
    
    - name: 克隆项目  
      run: |  
        cp -rf App/. OpenWrt-${{ env.arch_path }}/  
        cd OpenWrt-${{ env.arch_path }}  
        ./scripts/feeds update -a && rm -rf feeds/luci/applications/luci-app-*  
        git clone -b lede https://github.com/somemoo/OpenWrt-packages packages && mv -n packages/* package && rm -rf {packages,package/golang}  
        ./scripts/feeds install ${{ matrix.target }}  
        
        if [ -f "${{ matrix.target }}" ]; then  
          chmod +x "${{ matrix.target }}"  
          /bin/bash ./"${{ matrix.target }}"  
        else  
          echo "${{ matrix.target }} 文件不存在，无法执行。"  
        fi  
        echo "CONFIG_PACKAGE_${{ matrix.target }}=y" >> .config  
    
    - name: 下载依赖  
      id: package  
      run: |  
        cd OpenWrt-${{ env.arch_path }}  
        make defconfig  
        make -j$(nproc) download  
        
    - name: 开始编译  
      run: |   
        cd OpenWrt-${{ env.arch_path }}  
        make package/${{ matrix.target }}/compile -j$(nproc) V=s  
        
    - name: 准备 ipk  
      run: |  
        cd OpenWrt-${{ env.arch_path }}  
        mkdir -p ./artifact/IPK  
        find ./bin/packages/*/*/ -maxdepth 1 -type f -name "*.ipk" | xargs -i mv -f {} ./artifact/IPK/  
        cd ./artifact/IPK  
        echo "IPK=$PWD" >> $GITHUB_ENV  
        
    - name: 上传 ipk  
      uses: actions/upload-artifact@v4  
      id: upipk  
      with:  
        name: ${{ env.date }} (${{ env.arch_path }})-${{ matrix.target }}
        path: ${{ env.IPK }}/
