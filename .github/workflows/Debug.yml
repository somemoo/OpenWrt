name: Debug  

on:   
  workflow_dispatch:  
  # schedule:  
  #   - cron: "5 23 1/2 * *"  

permissions:  
  contents: read  

env:  
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}  
  SCKEY: ${{ secrets.SCKEY }}  
  PAT: ${{ secrets.PAT }}  
  PUSHPLUS_TOKEN: ${{ secrets.PUSHPLUS_TOKEN }}  
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}  
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}  
  TZ: Asia/Shanghai  
  date: ${{ github.run_date }}  

jobs:  
  build_openwrt:  
    if: github.event.repository.owner.id == github.event.sender.id || !github.event.sender.id  
    runs-on: ubuntu-latest  
    
    name: Debug测试   
    strategy:  
      fail-fast: false  
    
    steps:  
      - name: 检出代码  
        uses: actions/checkout@v2  # 使用稳定的版本  
        with:  
          fetch-depth: 0  

      - name: 定义环境  
        if: always()  
        run: echo "LOGd=true" >> $GITHUB_ENV  

      - name: 消息通知
        if: always()
        run: |
          RELEASE_URL="${{ steps.release.outputs.url }}"  # 确保步骤ID与创建Release的步骤一致

          if [ "${{ env.LOG }}" = "true" ]; then
            # 错误分支处理
            LOG_FILE="firmware/${{ matrix.target }}_make_error.log"
            if [ -f "$LOG_FILE" ]; then
              ERROR_LOG=$(tail -n 10 "$LOG_FILE" | sed -e 's/"/\\"/g' -e 's/\\/\\\\/g' -e 's/&/&amp;/g' -e 's/</&lt;/g' -e 's/>/&gt;/g' -e 's/\x1B\[[0-9;]*[a-zA-Z]//g')
            else
              ERROR_LOG="未找到日志文件"
            fi
            MSG_TITLE="❌ 固件 ${{ matrix.target }} 编译失败"  
            WMSG_CONTENT="失败信息摘要：\\n📅编译日期：${{ env.date }}\\n<details><summary>错误日志</summary><pre>${ERROR_LOG}</pre></details>\\n📝查看完整日志请下载Artifacts"
            TMSG_CONTENT="------%0A📅编译日期：${{ env.date }}%0A📝错误日志：%0A<pre>${ERROR_LOG}</pre>%0A📝查看完整日志请下载Artifacts"
          else  
            # 成功分支处理
            MSG_TITLE="✅ 固件 ${{ matrix.target }} 编译完成"  
            WMSG_CONTENT="构建信息摘要：\\n📅编译日期：${{ env.date }}\\n🔧生成目标：${{ matrix.target }}\\n📥下载地址：<a href=\\\"${RELEASE_URL}\\\">${{ matrix.target }}-${{ env.REPO_BRANCH }}</a>"
            TMSG_CONTENT="------%0A📅编译日期：${{ env.date }}%0A🔧生成目标：${{ matrix.target }}%0A📥下载地址：<a href=\"${RELEASE_URL}\">${{ matrix.target }}-${{ env.REPO_BRANCH }}</a>"
          fi  

          # PushPlus 通知（优化JSON构建）
          if [ -n "${{ secrets.PUSHPLUS_TOKEN }}" ]; then
            curl -X POST \
              -H "Content-Type: application/json" \
              -d '{
                "token": "'"${{ secrets.PUSHPLUS_TOKEN}}"'",
                "title": "'"$MSG_TITLE"'",
                "content": "'"$(echo -e "$WMSG_CONTENT" | sed 's/"/\\"/g')"'"
              }' \
              http://www.pushplus.plus/send
          fi

          # Telegram 通知（简化处理）
          if [ -n "${{ secrets.TELEGRAM_TOKEN }}" ]; then
            curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data-urlencode "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
              --data-urlencode "parse_mode=HTML" \
              --data-urlencode "text=<b>${MSG_TITLE}</b>${TMSG_CONTENT}"
          fi

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.PAT }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 1
