name: Debug  

on:   
  workflow_dispatch:  
  # schedule:  
  #   - cron: "5 23 1/2 * *"  

permissions:  
  contents: read  

env:  
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}  
  SCKEY: ${{ secrets.SCKEY }}  
  PAT: ${{ secrets.PAT }}  
  PUSHPLUS_TOKEN: ${{ secrets.PUSHPLUS_TOKEN }}  
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}  
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}  
  TZ: Asia/Shanghai  
  date: ${{ github.run_date }}  

jobs:  
  build_openwrt:  
    if: github.event.repository.owner.id == github.event.sender.id || !github.event.sender.id  
    runs-on: ubuntu-latest  
    
    name: Debug测试   
    strategy:  
      fail-fast: false  
    
    steps:  
      - name: 检出代码  
        uses: actions/checkout@v2  # 使用稳定的版本  
        with:  
          fetch-depth: 0  

      - name: 定义环境  
        if: always()  
        run: echo "LOG=true" >> $GITHUB_ENV  

      - name: 消息通知
        if: always()
        run: |
          # 检查日志文件是否存在
          if [ "${{ env.LOG }}" = "true" ]; then
            LOG_FILE="firmware/${{ matrix.target }}_make_error.log"
            if [ -f "$LOG_FILE" ]; then
              ERROR_LOG=$(tail -n 10 "$LOG_FILE" | sed 's/"/\\"/g; s/$/\\n/')
            else
              ERROR_LOG="未找到日志文件"
            fi
            MSG_TITLE="❌ 固件 ${{ matrix.target }} 编译失败"  
            WMSG_CONTENT="失败信息摘要：\n📅编译日期：${{ env.date }}\n<details><summary>错误日志</summary><pre>${ERROR_LOG}</pre></details>\n📝查看完整日志请下载Artifacts"
            TMSG_CONTENT="\n------------------------\n📅编译日期：${{ env.date }}\n📝错误日志：\n<pre>${ERROR_LOG}</pre>\n📝查看完整日志请下载Artifacts"
          else  
            MSG_TITLE="✅ 固件 ${{ matrix.target }} 编译完成"  
            RELEASE_URL="${{ steps.release.outputs.url }}"
            WMSG_CONTENT="构建信息摘要：\n📅编译日期：${{ env.date }}\n🔧生成目标：${{ matrix.target }}\n📥下载地址：<a href=\"${RELEASE_URL}\">${{ matrix.target }}-${{ env.REPO_BRANCH }}</a>"
            TMSG_CONTENT="\n------------------------\n📅编译日期：${{ env.date }}\n🔧生成目标：${{ matrix.target }}\n📥下载地址：<a href=\"${RELEASE_URL}\">${{ matrix.target }}-${{ env.REPO_BRANCH }}</a>"
          fi  
          
          # PushPlus 通知（需要HTML换行转义）
          if [ -n "${{ secrets.PUSHPLUS_TOKENv }}" ]; then
            curl -X POST \
              -H "Content-Type: application/json" \
              -d "{ \
                \"token\": \"${{ secrets.PUSHPLUS_TOKEN }}\", \
                \"title\": \"$MSG_TITLE\", \
                \"content\": \"$(echo -e $WMSG_CONTENT)\" \
              }" \
              http://www.pushplus.plus/send  
          fi

          # Telegram 通知（使用HTML模式）
          if [ -n "${{ secrets.TELEGRAM_TOKEN }}" ]; then
            # 转换换行符为HTML换行
            TMSG_HTML=$(echo -e "$TMSG_CONTENT" | sed 's/\\n/%0A/g')
            curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              --data-urlencode "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
              --data-urlencode "parse_mode=HTML" \
              --data-urlencode "text=<b>${MSG_TITLE}</b>${TMSG_HTML}"
          fi

