name: Openwrt-AutoBuild

on:
  workflow_dispatch:
  schedule:
    - cron: "5 19 1/2 * *"
  watch:
    types: started

permissions:
  contents: read

env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SCKEY: ${{ secrets.SCKEY }}
  PAT: ${{ secrets.PAT }}
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TZ: Asia/Shanghai

jobs:
  build_openwrt:
    if: github.event.repository.owner.id == github.event.sender.id || !github.event.sender.id
    runs-on: ubuntu-latest
    name: 构建 ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        target: [lede-x86-64, immortalwrt-x86-64]

    steps:
      - name: 检出代码
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: 配置环境变量
        run: |
          echo "FILE_NAME=${{ matrix.target }}" >> $GITHUB_ENV
          echo "REPO_NAME=$(basename "${{ matrix.target }}" | awk -F'-' '{print $1}')" >> $GITHUB_ENV
          echo "ARCH_NAME=$(basename "${{ matrix.target }}" | sed -E 's/^[^-]*-//')" >> $GITHUB_ENV
          echo "date=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV

      - name: 加载 Settings.ini
        run: |
          source "${GITHUB_WORKSPACE}/${{ env.REPO_NAME }}/common/settings.ini"
          if [ -f "${GITHUB_WORKSPACE}/${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/settings.ini" ]; then
            source "${GITHUB_WORKSPACE}/${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/settings.ini"
          fi
          echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
          echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
          echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
          echo "CUSTOM_SH=${CUSTOM_SH}" >> $GITHUB_ENV
          echo "COMMON_SH=${COMMON_SH}" >> $GITHUB_ENV
          echo "UPLOAD_BIN_FIRMWARE_FOR_ARTIFACT=${UPLOAD_BIN_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
          echo "UPLOAD_FIRMWARE_FOR_ARTIFACT=${UPLOAD_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
          echo "UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT=${UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
          echo "UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT=${UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
          echo "UPLOAD_FIRMWARE_FOR_RELEASE=${UPLOAD_FIRMWARE_FOR_RELEASE}" >> $GITHUB_ENV

      - name: 加载环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          sudo timedatectl set-timezone "Asia/Shanghai"
          sudo apt update
          sudo apt full-upgrade -y
          sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
          libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
          libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf npm python3 \
          python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
          uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo apt -y autoremove --purge
          sudo apt -y clean
          git clone --depth=1 https://github.com/openwrt-dev/po2lmo
          (cd po2lmo && sudo make && sudo make install)
          df -h

      - name: 克隆源代码
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH OpenWrt

      - name: 加载与更新 feeds
        run: |
          [ -n "$(ls -A "${{ env.REPO_NAME }}/common/files/" 2>/dev/null)" ] && cp -rf "${{ env.REPO_NAME }}/common/files/"* OpenWrt/
          [ -n "$(ls -A "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/files/" 2>/dev/null)" ] && cp -rf "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/files/"* OpenWrt/
          cp -rf ${{ env.REPO_NAME }} OpenWrt/
          cd OpenWrt
          sed -i "/src-git vi /d; \$a src-git vi https://github.com/somemoo/OpenWrt-packages;${{ env.REPO_NAME }}" feeds.conf.default
          ./scripts/feeds update -a
          chmod +x ${{ env.REPO_NAME }}/common/feeds-vi.sh
          sudo "${{ env.REPO_NAME }}/common/feeds-vi.sh"
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 清理磁盘空间
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo mkdir -p -m 777 /mnt/OpenWrt/dl /mnt/OpenWrt/bin /mnt/OpenWrt/staging_dir /mnt/OpenWrt/build_dir
          ln -sf /mnt/OpenWrt/dl OpenWrt/dl
          ln -sf /mnt/OpenWrt/bin OpenWrt/bin
          ln -sf /mnt/OpenWrt/staging_dir OpenWrt/staging_dir
          ln -sf /mnt/OpenWrt/build_dir OpenWrt/build_dir

      - name: 加载自定义配置
        run: |
          cd OpenWrt
          if [ -f "${{ env.REPO_NAME }}/common/$COMMON_SH" ]; then
            chmod +x ${{ env.REPO_NAME }}/common/$COMMON_SH
            /bin/bash "${{ env.REPO_NAME }}/common/$COMMON_SH"
          fi
          if [ -f "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/$CUSTOM_SH" ]; then
            chmod +x ${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/$CUSTOM_SH
            /bin/bash "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/$CUSTOM_SH"
          fi
          mv ${{ env.REPO_NAME }}/common/$CONFIG_FILE .config
          if [ -f "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/$CONFIG_FILE" ]; then
            echo >> .config
            cat ${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/$CONFIG_FILE >> .config
          fi

      - name: 应用补丁
        run: |
          cd OpenWrt
          if [ -n "$(ls -A "${{ env.REPO_NAME }}/common/patches" 2>/dev/null)" ]; then
            find "${{ env.REPO_NAME }}/common/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%' | patch -d './' -B --merge -p1 --forward"
          fi
          if [ -n "$(ls -A "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/patches" 2>/dev/null)" ]; then
            find "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%' | patch -d './' -B --merge -p1 --forward"
          fi

      - name: 下载软件包
        id: package
        run: |
          cd OpenWrt
          make defconfig
          make download -j16
          df -h

      - name: 编译固件
        id: compile
        continue-on-error: true
        run: |
          set -eo pipefail
          cd OpenWrt
          ERROR_LOG="${{ matrix.target }}_make_error.log"
          FULL_LOG="${{ matrix.target }}_full.log"
          echo "::group::📦 多线程编译 ${{ matrix.target }}"
          echo "线程数: $(($(nproc)+1))"
          if make -j$(($(nproc)+1)) V=s 2>&1 | tee "$FULL_LOG" | grep -iE 'error|fatal|failed' > "$ERROR_LOG"; then
            echo "多线程编译成功！"
            echo "BUILD_STATUS=success" >> $GITHUB_ENV
            echo "::endgroup::"
          else
            echo "多线程编译失败！"
            echo "::endgroup::"
            echo "::group::📝 多线程错误摘要"
            echo "以下是最多50行错误摘要（完整日志见Artifacts）："
            head -n 50 "$ERROR_LOG" | sed 's/^/   /'
            echo "::endgroup::"
            echo "::warning::⚠️ 多线程编译失败，尝试单线程编译..."
            echo "::group::🐢 单线程编译 ${{ matrix.target }}"
            if make -j1 V=s 2>&1 | tee "$FULL_LOG" | grep -iE 'error|fatal|failed' >> "$ERROR_LOG"; then
              echo "单线程编译成功！"
              rm -f "$FULL_LOG" "$ERROR_LOG"
              echo "::notice::降级编译成功！"
              echo "BUILD_STATUS=success" >> $GITHUB_ENV
              echo "::endgroup::"
            else
              echo "单线程编译失败！"
              echo "::endgroup::"
              echo "::group::📝 单线程错误摘要"
              echo "以下是最多50行错误摘要（完整日志见Artifacts）："
              tail -n 50 "$ERROR_LOG" | sed 's/^/   /'
              echo "::endgroup::"
              echo "::error::❌ 彻底编译失败！最后10行错误："
              tail -n 10 "$ERROR_LOG" | sed 's/^/   /'
              echo "BUILD_STATUS=failed" >> $GITHUB_ENV
            fi
          fi
          if [ "$BUILD_STATUS" = "success" ]; then
            echo "::group::📊 空间使用情况"
            df -hT | grep -v tmpfs
            echo "::endgroup::"
            echo "::group::✅ 构建成果"
            ls -lh bin/targets/*/*/ || true
            echo "::endgroup::"
          fi

      - name: 组织文件
        continue-on-error: true
        id: organize
        run: |
          mkdir -p firmware
          [ "${{ env.BUILD_STATUS }}" = "failed" ] && find OpenWrt/ -type f $$ -name "*_full.log" -o -name "*_error.log" $$ -exec cp {} ./firmware/ \; 2>/dev/null
          if [ "${{ env.BUILD_STATUS }}" = "success" ]; then
            find OpenWrt/bin/targets/ $$ -type d -name "packages" -o -name "*buildinfo" -o -name "*json" -o -name "*txt" -o -name "*manifest" $$ -exec rm -rf {} + 2>/dev/null
            find OpenWrt/bin/targets/ -type f -exec cp -f {} ./firmware/ \; 2>/dev/null
            cp OpenWrt/.config ./firmware/${{ matrix.target }}.config
            cp OpenWrt/${{ env.REPO_NAME }}/release ./firmware
            cd firmware
            for file in *; do tar -czf "$file.tar.gz" "$file" && [ -f "$file" ] && rm -f "$file"; done
            tar -xzf sha256sums.tar.gz && tar -xzf release.tar.gz && tar -xzf ${{ matrix.target }}.config.tar.gz && rm -f {sha256sums.tar.gz, release.tar.gz, ${{ matrix.target }}.config.tar.gz}
            mv sha256sums ${{ matrix.target }}_sha256sums
            echo "FIRMWARE_STATUS=true" >> $GITHUB_ENV
            [ -n "$(find . -name '*iso*' -print -quit)" ] && echo "ISO=true" >> $GITHUB_ENV
            [ -n "$(find . -name '*bin*' -print -quit)" ] && echo "BIN=true" >> $GITHUB_ENV
            [ -n "$(find . -name '*efi*' -print -quit)" ] && echo "EFI=true" >> $GITHUB_ENV
            [ -n "$(find . -name '*squashfs*' -print -quit)" ] && echo "COMBINED=true" >> $GITHUB_ENV
            ls
          else
            [ -n "$(find . -name '*_full.log' -print -quit)" ] && echo "LOG=true" >> $GITHUB_ENV
            ls
          fi

      - name: 上传固件到 Release
        uses: softprops/action-gh-release@master
        id: uprelease
        continue-on-error: true
        if: ${{ env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true' && env.FIRMWARE_STATUS == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
        with:
          files: firmware/*
          name: ${{ env.date }}-${{ matrix.target }}
          tag_name: ${{ env.date }}-${{ matrix.target }}
          body_path: firmware/release

      - name: 添加 Release 状态
        continue-on-error: true
        if: ${{ steps.uprelease.outcome == 'success' }}
        run: |
          echo "RELEASE=true" >> $GITHUB_ENV

      - name: 上传固件到 Artifact
        uses: actions/upload-artifact@v4
        continue-on-error: true
        if: ${{ env.UPLOAD_FIRMWARE_FOR_ARTIFACT == 'true' && env.COMBINED == 'true' }}
        with:
          name: ${{ env.date }}-${{ matrix.target }}
          path: |
            firmware/*squashfs*
            !firmware/*efi*
            !firmware/*rootfs*

      - name: 上传 EFI 固到 Artifact
        uses: actions/upload-artifact@v4
        continue-on-error: true
        if: ${{ env.UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT == 'true' && env.EFI == 'true' }}
        with:
          name: ${{ env.date }}-${{ matrix.target }}_EFI
          path: firmware/*efi*

      - name: 上传 BIN 固到 Artifact
        uses: actions/upload-artifact@v4
        continue-on-error: true
        if: ${{ env.UPLOAD_BIN_FIRMWARE_FOR_ARTIFACT == 'true' && env.BIN == 'true' }}
        with:
          name: ${{ env.date }}-${{ matrix.target }}_BIN
          path: firmware/*bin*

      - name: 上传 ISO 固件到 Artifact
        uses: actions/upload-artifact@v4
        continue-on-error: true
        if: ${{ env.UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT == 'true' && env.ISO == 'true' }}
        with:
          name: ${{ env.date }}-${{ matrix.target }}_ISO
          path: firmware/*iso*

      - name: 上传错误日志到 Artifact
        uses: actions/upload-artifact@v4
        continue-on-error: true
        if: ${{ env.LOG == 'true' }}
        with:
          name: ${{ matrix.target }}_full_error
          path: firmware/*_full.log

      - name: 消息通知
        run: |
          if [ "${{ env.COMBINED }}" == 'true' ] || [ "${{ env.EFI }}" == 'true' ] || [ "${{ env.BIN }}" == 'true' ] || [ "${{ env.ISO }}" == 'true' ] || [ "${{ env.RELEASE }}" == 'true' ]; then
            MSG_TITLE="✅ 固件 ${{ env.date }}-${{ matrix.target }} 编译完成"
            MSG_CONTENT="<b>🎉 编译成功！</b>%0A%0A📅 日期：${{ env.date }}%0A🔧 目标：${{ matrix.target }}%0A🚀 已上传到 Release"
            WX_CONTENT="固件${{ env.date }}-${{ matrix.target }}编译完成😋!!!"
          else
            ERROR_LOG=$(tail -n 10 firmware/${{ matrix.target }}_make_error.log | sed 's/</\&lt;/g; s/>/\&gt;/g')
            MSG_TITLE="❌ 固件 ${{ env.date }}-${{ matrix.target }} 编译失败"
            MSG_CONTENT="<b>⚠️ 编译失败！</b>%0A%0A🔧 目标：${{ matrix.target }}%0A%0A<pre>错误日志：%0A${ERROR_LOG}</pre>%0A%0A查看完整日志请下载Artifacts"
            WX_CONTENT="固件${{ env.date }}-${{ matrix.target }}编译失败😭!!! 错误日志: ${ERROR_LOG}"
          fi
          if [ -n "$SCKEY" ]; then
            curl -X POST \
              --data-urlencode "key=${{ secrets.SCKEY }}" \
              --data-urlencode "title=${MSG_TITLE}" \
              --data-urlencode "desp=${WX_CONTENT}" \
              "https://sctapi.ftqq.com/${{ secrets.SCKEY }}.send"
          fi
          if [ -n "$TELEGRAM_TOKEN" ]; then
            curl -k \
              --data-urlencode "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
              --data-urlencode "text=<b>${MSG_TITLE}</b>%0A${MSG_CONTENT}" \
              --data-urlencode "parse_mode=HTML" \
              --data-urlencode "disable_web_page_preview=true" \
              "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage"
          fi

      - name: 删除工作流运行记录
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.PAT }}
          retain_days: 2
          keep_minimum_runs: 1

      - name: 删除旧的 Releases
        uses: dev-drprasad/delete-older-releases@master
        continue-on-error: true
        if: ${{ env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true' }}
        with:
          keep_latest: 15
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
